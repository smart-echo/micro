// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/runtime/v1/build.proto

package v1

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/smart-echo/micro/api"
	client "github.com/smart-echo/micro/client"
	server "github.com/smart-echo/micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BuildService service

func NewBuildServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BuildService service

type BuildService interface {
	Download(ctx context.Context, in *Service, opts ...client.CallOption) (BuildService_DownloadService, error)
}

type buildService struct {
	c    client.Client
	name string
}

func NewBuildService(name string, c client.Client) BuildService {
	return &buildService{
		c:    c,
		name: name,
	}
}

func (c *buildService) Download(ctx context.Context, in *Service, opts ...client.CallOption) (BuildService_DownloadService, error) {
	req := c.c.NewRequest(c.name, "BuildService.Download", &Service{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &buildServiceDownload{stream}, nil
}

type BuildService_DownloadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	CloseSend() error
	Close() error
	Recv() (*DownloadResponse, error)
}

type buildServiceDownload struct {
	stream client.Stream
}

func (x *buildServiceDownload) CloseSend() error {
	return x.stream.CloseSend()
}

func (x *buildServiceDownload) Close() error {
	return x.stream.Close()
}

func (x *buildServiceDownload) Context() context.Context {
	return x.stream.Context()
}

func (x *buildServiceDownload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *buildServiceDownload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *buildServiceDownload) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BuildService service

type BuildServiceHandler interface {
	Download(context.Context, *Service, BuildService_DownloadStream) error
}

func RegisterBuildServiceHandler(s server.Server, hdlr BuildServiceHandler, opts ...server.HandlerOption) error {
	type buildService interface {
		Download(ctx context.Context, stream server.Stream) error
	}
	type BuildService struct {
		buildService
	}
	h := &buildServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BuildService{h}, opts...))
}

type buildServiceHandler struct {
	BuildServiceHandler
}

func (h *buildServiceHandler) Download(ctx context.Context, stream server.Stream) error {
	m := new(Service)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.BuildServiceHandler.Download(ctx, m, &buildServiceDownloadStream{stream})
}

type BuildService_DownloadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DownloadResponse) error
}

type buildServiceDownloadStream struct {
	stream server.Stream
}

func (x *buildServiceDownloadStream) Close() error {
	return x.stream.Close()
}

func (x *buildServiceDownloadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *buildServiceDownloadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *buildServiceDownloadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *buildServiceDownloadStream) Send(m *DownloadResponse) error {
	return x.stream.Send(m)
}
